#include<iostream>
#include<Windows.h>
#include<time.h>
using namespace std;

// Board Size 
#define BOARD_SIZE  5
// Board in Star
#define BOARD_STAR  -99999
// use Return int Method, if i don't want to result
#define NONE_VALUE  -1
// Bingo Win Count
#define BINGO_WIN_COUNT  3
// When Comp Board Exist Star
#define WEIGHT_COMP_BOARD_EXIST_STAR_AROUND  10
// When Player Board Exist Star
#define WEIGHT_PLAYER_BOARD_EXIST_STAR  3
#define WEIGHT_PLAYER_BOARD_EXIST_STAR_AROUND -5
// Continuity Star Two 
#define WEIGHT_CONSECUTIVE_STARS_TWO  40
// Continuity Star Three 
#define WEIGHT_CONSECUTIVE_STARS_THREE  100
// Continuity Star Four
#define WEIGHT_CONSECUTIVE_STARS_FOUR  500
// Num is in Player Board But isnt in Computer Board
#define WEIGHT_HAVE_PLAYER_NOT_HAVE_COMP  -50

// BingoGame
void BingoGame();
// GawibawiboGame
int GawibawiboGame();
// Init Board 
//  BingoBoardArr, RandomNumber Array, BingoSize, RandomNumber Array Size, Suffle Size
void Init_Board(int* _iBingoBoardArr, int* _iRanNumArr,  const int _iRanSize, const int _iSuffleSize);
// DrawBoard
// BingoBoard, BingoSize, Current Bingo Board Name
void Draw_Board(int* _iBingoBoardArr, const char* _sName);
// Suffle Ran Num
// RandomNumber Array, RandomNumber Array Size, Suffle Size
void Suffle_Ran_Num(int* _iRanNumArr, const int _iRanSize, const int _iSuffleSize);
// Player Choice Method
// Player Bingo Board, ComputerBingoBoard, Computer Judge Weight Board, Run, All Size
void Player_Turn(int* _iPlayerBingoBoard, int* _iComputerBingoBoardArr, int* _iComJudgeWeightArr, bool* _bIsRun);
// Computer Choice Method
// Player Bingo Board, ComputerBingoBoard, Computer Judge Weight Board, Run, All Size
void Computer_Turn(int* _iPlayerBingoBoardArr, int* _iComputerBingoBoardArr, int* _iComJudgeWeightArr, bool* _bIsRun);
// Check To Win Loase Player And Computer
// BingoBoard Arr, All Size, Run 
void Check_To_Win(int* const _iBingoBoardArr,  int* _iJudgeWinValue);
// Update Init Weight
// BingoBoard Arr, All Size
void Update_Init_Weight(int* _iComJudgeWeightArr);
// Update Exist Star Weight
// BingoBoard Arr, Computer Judge Weight Arr, Size, EXIST_STAR_AROUND, EXIST_STAR
void Update_Exist_Star_Weight(int* const _iBingoBoardArr, int* _iComJudgeWeightArr, 
	const int _iExist_Star, const int _iExist_Star_Around);
// Update Comp Board Exist Star Near Bingo
// ComBingoBoard Arr, Com JudgeWeight Arr
void Update_Board_Exist_Star_Near_Bingo(int* const _iComBingoBoardArr, int* _iComJudgeWeightArr);
// Update Player Num To Weight
void Update_Player_Num_To_Weight(int* const _iPlayerBingoBoardArr, int* const _iCompBingoBoardArr, int* _iComJudgeWeightArr);
// Draw All Bingo Board
void Draw_All_Bingo_Board(int* const _iPlayerBingoBoardArr, int* const _iCompBingoBoardArr);
// Sort_PickUp_Order
void Sort_PickUp_Order(int* const _iComJudgeWeightArr, int* _iNumArr);
// Check Number in Board
// BingoBoard Arr, AllSize
int Get_Index_Check_Number_InBoard(int* _iBingoBoardArr,  int _iCheckNumber);
// if continue Star
// Star Count
int Judge_Consecutive_Stars_Count_Get_Plus_Num(int _iStarCount);
// str to Change Number
// Sentence
int Change_Str_To_Number(char* _sSentence);
// Swap 
void Swap(int* _iNum1, int* _iNum2);

int main()
{
	BingoGame();
	return 0;
}
// Main bingo Game
void BingoGame()
{
	// Make Game Board Variable Define
	bool						bIsRun = true;
	const int			    iRanSize = 50;
	const int				iSuffleSize = 500;
	int						iRanNumArr[iRanSize] = {};
	// Player Board
	int						iPlayerBoardArr[BOARD_SIZE * BOARD_SIZE] = {};
	// Computer Board
	int						iComBingoBoardArr[BOARD_SIZE * BOARD_SIZE] = {};
	int						iComJudgeWeightArr[BOARD_SIZE * BOARD_SIZE] = {};
	int						iPlayerTurn = 0;
	int						iComputerTurn = 0;
	// Need to Turn Choice 
	void						(*vmTurnArr[2])(int*, int*, int*, bool*) = {};
	int						iCheckPlayerWin = 0;
	int						iCheckComWin = 0;

	// Init RanNumArr 
	srand(unsigned(time(NULL)));
	// Judge Player And Computer Turn
	int iJudgeWinLoseGawibawibo = GawibawiboGame();
	if (iJudgeWinLoseGawibawibo)
	{
		// if Gawibawibo Computer Lose
		iComputerTurn = 1;
	}
	else
	{
		// if Gawibawibo Player Lose
		iPlayerTurn = 1;
	}
	// Inset Void Pointer value
	vmTurnArr[iPlayerTurn] = Player_Turn;
	vmTurnArr[iComputerTurn] = Computer_Turn;
	for (int i = 0; i < iRanSize; ++i)
	{
		iRanNumArr[i] = i + 1;
	}
	// Init Player Bingo Board
	Init_Board(iPlayerBoardArr, iRanNumArr, iRanSize, iSuffleSize);
	// Init Computer Bingo Board
	Init_Board(iComBingoBoardArr, iRanNumArr, iRanSize, iSuffleSize);
	// Run BingoGame
	while (bIsRun)
	{
		// Draw Bingo Board 
		Draw_All_Bingo_Board(iPlayerBoardArr, iComBingoBoardArr);
		// Com, Player Turn
		for (int i = 0; i < 2; ++i)
		{
			vmTurnArr[i](iPlayerBoardArr, iComBingoBoardArr, iComJudgeWeightArr, &bIsRun);
			if (bIsRun == false)
			{
				Draw_All_Bingo_Board(iPlayerBoardArr, iComBingoBoardArr);
			}
		}
		Check_To_Win(iPlayerBoardArr, &iCheckPlayerWin);
		Check_To_Win(iComBingoBoardArr, &iCheckComWin);
		if (1 == iCheckComWin || 1 == iCheckPlayerWin)
		{
			system("pause");
			// Draw Bingo Board 
			Draw_All_Bingo_Board(iPlayerBoardArr, iComBingoBoardArr);
			// Both Win
			if (iCheckComWin == iCheckPlayerWin)
			{
				cout << "둘이 비겼습니다." << endl;
			}
			// Player Win
			else if (1 == iCheckPlayerWin)
			{
				cout << "플레이어가 이겼습니다." << endl;
			}
			// Computer Win
			else if (1 == iCheckComWin)
			{
				cout << "컴퓨터가 이겼습니다." << endl;
			}
			bIsRun = false;
		}
		system("pause");
	}
}
//  Gawibawibo Game
int GawibawiboGame()
{
	int iInput = 0;
	const int iGawi = 1;
	const int iBawi = 2;
	const int iBo = 3;
	while (true)
	{
		system("cls");
		cout << "<간단한 가위바위보 게임>" << endl;
		cout << "플레이어의 입력(가위 : 1, 바위 : 2, 보 : 3) : ";
		char sSentence[10] = {};
		cin.getline(sSentence, 10);
		int iInput = Change_Str_To_Number(sSentence);
		if (iInput >= iGawi && iInput <= iBo)
		{
			cout << "컴퓨터의 선택 : ";
			int iComInput = rand() % 3 + 1;
			if (iComInput == iGawi)
				cout << "가위" << endl;
			else if (iComInput == iBawi)
				cout << "바위" << endl;
			else if (iComInput == iBo)
				cout << "보" << endl;
			// Player And Computer Draw 
			if (iComInput == iInput)
			{
				cout << "비겼습니다." << endl;
			}
			// Player Lose to Computer 
			else if ((iInput == iGawi && iComInput == iBawi) || 
				(iInput == iBawi && iComInput == iBo) || (iInput == iBo && iComInput == iGawi))
			{
				cout << "플레이어는 패배했습니다." << endl;
				system("pause");
				return 0;
			}
			// Player Win to Computer
			else if ((iInput == iBawi && iComInput == iGawi) ||
				(iInput == iGawi && iComInput == iBo) || (iInput == iBo && iComInput == iBawi))
			{
				cout << "플레이어는 승리했습니다." << endl;
				system("pause");
				return 1;
			}
		}
		else
		{
			cout << "잘못 입력하셨습니다. 다시 입력해주세요" << endl;
		}
		system("pause");
	}

	return 0;
}
// DrawBoard
void Draw_Board(int* _iBingoBoardArr,  const char* _sName)
{
	cout << "<" << _sName << ">" << endl;
	for (int i = 0; i < BOARD_SIZE; ++i)
	{
		for (int j = 0; j < BOARD_SIZE; ++j)
		{
			int iBingoBoardPosValue = _iBingoBoardArr[BOARD_SIZE * i + j];
			// Current Board Star
			if (iBingoBoardPosValue == BOARD_STAR)
				cout << "*";
			else
				cout << iBingoBoardPosValue;

			cout << "\t";
		}
		cout << "\n" <<  endl;
	}
	cout << "====================================" << endl;
}
// Init Board 
void Init_Board(int* _iBingoBoardArr, int* _iRanNumArr,  const int _iRanSize, const int _iSuffleSize)
{
	// Shuffle RanNumArr
	Suffle_Ran_Num(_iRanNumArr, _iRanSize, _iSuffleSize);
	// Init BingoBoard 
	for (int i = 0; i < BOARD_SIZE; ++i)
	{
		for (int j = 0; j < BOARD_SIZE; ++j)
		{
			int iIndex = i * BOARD_SIZE + j;
			_iBingoBoardArr[iIndex] = _iRanNumArr[iIndex];
		}
	}
}
// Suffle Random Number
void Suffle_Ran_Num(int* _iRanNumArr, const int _iRanSize, const int _iSuffleSize)
{
	// Shuffle RanNumArr
	for (int i = 0; i < _iSuffleSize; ++i)
	{
		int iRanNum1 = rand() % (_iRanSize);
		int iRanNum2 = rand() % (_iRanSize);
		Swap(&_iRanNumArr[iRanNum1], &_iRanNumArr[iRanNum2]);
	}
}
// Player Choice Method
// PlayerBingoBoard, PlayerBingoBoardSize
void Player_Turn(int* _iPlayerBingoBoard, int* _iComputerBingoBoardArr, int* _iComJudgeWeightArr, bool* _bIsRun)
{
	char sSentence[124] = {};
	while (true)
	{
		cout << "<플레이어 턴>" << endl;
		cout << "플레이어 선택(보드 안에 있는 숫자를 선택) : ";
		cin.getline(sSentence, 124);
		int iNum = Change_Str_To_Number(sSentence);
		if (iNum != NONE_VALUE)
		{
			// Get Index
			int iPlayerIndex = Get_Index_Check_Number_InBoard(_iPlayerBingoBoard, iNum);
			// if not NONE_VALUE
			if (iPlayerIndex != NONE_VALUE)
			{
				_iPlayerBingoBoard[iPlayerIndex] = BOARD_STAR;
				// Com Value Is 
				int iComIndex = Get_Index_Check_Number_InBoard(_iComputerBingoBoardArr, iNum);
				// if not NONE_VALUE
				if (iComIndex != NONE_VALUE)
				{
					_iComputerBingoBoardArr[iComIndex] = BOARD_STAR;
				}
				break;
			}
			else
			{
				cout << "잘못된 수를 선택하셨습니다.다시 선택해주시기 바랍니다." << endl;
			}
		}
		else
		{
			cout << "잘못된 수를 선택하셨습니다.다시 선택해주시기 바랍니다." << endl;
		}
	}
}
// Computer Choice Method
// Player Bingo Board, ComputerBingoBoard, Computer Judge Weight Board, All Size
void Computer_Turn(int* _iPlayerBingoBoardArr, int* _iComputerBingoBoardArr, int* _iComJudgeWeightArr, bool* _bIsRun)
{
	int				iPriorityArr[BOARD_SIZE * BOARD_SIZE] = {};
	// Update Init Com Judge Weight
	Update_Init_Weight(_iComJudgeWeightArr);
	// Update Star Weight To Player Board In Star
	Update_Exist_Star_Weight(_iPlayerBingoBoardArr, _iComJudgeWeightArr, WEIGHT_PLAYER_BOARD_EXIST_STAR, 
		WEIGHT_PLAYER_BOARD_EXIST_STAR_AROUND);
	// Update Star Weight To Computer Board In Star
	Update_Exist_Star_Weight(_iComputerBingoBoardArr, _iComJudgeWeightArr, BOARD_STAR,
		WEIGHT_COMP_BOARD_EXIST_STAR_AROUND);
	// Update When Star In Computer Board
	Update_Board_Exist_Star_Near_Bingo(_iComputerBingoBoardArr, _iComJudgeWeightArr);
	// Update When Star is in the Player Board, Plus Weight
	Update_Player_Num_To_Weight(_iPlayerBingoBoardArr, _iComputerBingoBoardArr, _iComJudgeWeightArr);
	// if star is in the computer board, replace weight board
	for (int i = 0; i < BOARD_SIZE; ++i)
	{
		for (int j = 0; j < BOARD_SIZE; ++j)
		{
			int iIndex = BOARD_SIZE * i + j;
			if (_iComputerBingoBoardArr[iIndex] == BOARD_STAR)
				_iComJudgeWeightArr[iIndex] = BOARD_STAR;
		}
	}
	Sort_PickUp_Order(_iComJudgeWeightArr, iPriorityArr);
	cout << "<컴퓨터 턴>" << endl;
	cout << "컴퓨터 선택(보드 안에 있는 숫자를 선택) : ";
	for (int i = 0; i < BOARD_SIZE * BOARD_SIZE; ++i)
	{
		// Get Index
		int iCompIndex = Get_Index_Check_Number_InBoard(_iComputerBingoBoardArr, _iComputerBingoBoardArr[iPriorityArr[i]]);
		bool bIsInPlayerBoard = false;
		// if not NONE_VALUE
		if (iCompIndex != NONE_VALUE)
		{
			int iGetCompBoardValue = _iComputerBingoBoardArr[iCompIndex];
			_iComputerBingoBoardArr[iCompIndex] = BOARD_STAR;
			cout << iGetCompBoardValue << endl;
			// Com Value Is 
			int iPlayerIndex = Get_Index_Check_Number_InBoard(_iPlayerBingoBoardArr, iGetCompBoardValue);
			// if not NONE_VALUE
			if (iPlayerIndex != NONE_VALUE)
			{
				_iPlayerBingoBoardArr[iPlayerIndex] = BOARD_STAR;
			}
			break;
		}
	}
}
// Check To Win Loase Player And Computer
// BingoBoard Arr, All Size, Run 
void Check_To_Win(int* const _iBingoBoardArr, int* _iJudgeWinValue)
{
	// define Variable Need to Check Bingo
	int			iBingoCount = 0;
	int			i = 0;
	int			j = 0;
	int			iCheckIsBingoNCount = 0;
	// Check Left Cross
	for (i = 0; i < BOARD_SIZE; ++i)
	{
		if (_iBingoBoardArr[BOARD_SIZE * i + j] == BOARD_STAR)
		{
			++iCheckIsBingoNCount;
		}
		++j;
	}
	if (iCheckIsBingoNCount == BOARD_SIZE)
	{
		++iBingoCount;
	}
	// Check Right Cross
	iCheckIsBingoNCount = 0;
	for (i = 0, j = BOARD_SIZE - 1; i < BOARD_SIZE; ++i, --j)
	{
		if (_iBingoBoardArr[BOARD_SIZE * i + j] == BOARD_STAR)
		{
			++iCheckIsBingoNCount;
		}
	}
	if (iCheckIsBingoNCount == BOARD_SIZE)
	{
		++iBingoCount;
	}
	// Check All Height 
	for (j = 0; j < BOARD_SIZE; ++j)
	{
		iCheckIsBingoNCount = 0;
		for (i = 0; i < BOARD_SIZE; ++i)
		{
			if (_iBingoBoardArr[BOARD_SIZE * i + j] == BOARD_STAR)
			{
				++iCheckIsBingoNCount;
			}
		}
		if (iCheckIsBingoNCount == BOARD_SIZE)
		{
			++iBingoCount;
		}
	}
	// Check Width
	for (i = 0; i < BOARD_SIZE; ++i)
	{
		iCheckIsBingoNCount = 0;
		for (j = 0; j < BOARD_SIZE; ++j)
		{
			if (_iBingoBoardArr[BOARD_SIZE * i + j] == BOARD_STAR)
			{
				++iCheckIsBingoNCount;
			}
		}
		if (iCheckIsBingoNCount == BOARD_SIZE)
		{
			++iBingoCount;
		}
	}
	if (iBingoCount >= BINGO_WIN_COUNT)
	{
		*_iJudgeWinValue = 1;
	}
}
// Update Init Weight
// BingoBoard Arr, All Size
void Update_Init_Weight(int* _iComJudgeWeightArr)
{
	for (int i = 0; i < BOARD_SIZE; ++i)
	{
		for (int j = 0; j < BOARD_SIZE; ++j)
		{
			int iIndex = BOARD_SIZE * i + j;
			// Board Last Side 
			if ((i == 0 || j == 0) || (i == BOARD_SIZE - 1 || j == BOARD_SIZE - 1))
				_iComJudgeWeightArr[iIndex] = 1;
			// Board Second Size
			else if ((i == 1 || j == 1) || (i == BOARD_SIZE - 2 || j == BOARD_SIZE - 2))
				_iComJudgeWeightArr[iIndex] = 3;
			// Board Center
			else
				_iComJudgeWeightArr[iIndex] = 5;
		}
	}
}
// Update Computer Weight
// Computer BingoBoard Arr, Computer Judge Weight Arr, Size
void Update_Exist_Star_Weight(int* const _iBingoBoardArr, int* _iComJudgeWeightArr, 
	 const int _iExist_Star, const int _iExist_Star_Around)
{
	for (int i = 0; i < BOARD_SIZE; ++i)
	{
		for (int j = 0; j < BOARD_SIZE; ++j)
		{
			int iIndex = BOARD_SIZE * i + j;
			if (_iBingoBoardArr[iIndex] == BOARD_STAR)
			{
				int iUpIndex = BOARD_SIZE * (i - 1) + j;
				int iDownIndex = BOARD_SIZE * (i + 1) + j;
				int iLeftIndex = BOARD_SIZE * i + j - 1;
				int iRightIndex = BOARD_SIZE * i + j + 1;
				// Up Side
				if (i == 0)
				{
					// Down Weight Value
					_iComJudgeWeightArr[iDownIndex] += _iExist_Star_Around;
					// Is Not Up Left Side
					if (j != 0)
						_iComJudgeWeightArr[iLeftIndex] += _iExist_Star_Around;
					// Is Not Up Right Side
					if (j != BOARD_SIZE - 1)
						_iComJudgeWeightArr[iRightIndex] += _iExist_Star_Around;
				}
				// Left Side 
				else if (j == 0)
				{
					// Right  Weight Value
					_iComJudgeWeightArr[iRightIndex] += _iExist_Star_Around;
					// Is Not Up Right 
					if (i != 0)
						_iComJudgeWeightArr[iUpIndex] += _iExist_Star_Around;
					// Is Not Down Right
					if (i != BOARD_SIZE - 1)
						_iComJudgeWeightArr[iDownIndex] += _iExist_Star_Around;
				}
				// Down Side
				else if (i == BOARD_SIZE - 1)
				{
					// Forward Weight Value
					_iComJudgeWeightArr[iUpIndex] += _iExist_Star_Around;
					// Is Not Up Left Side
					if (j != 0)
						_iComJudgeWeightArr[iLeftIndex] += _iExist_Star_Around;
					// Is Not Up Right Side
					if (j != BOARD_SIZE - 1)
						_iComJudgeWeightArr[iRightIndex] += _iExist_Star_Around;
				}
				// Right Side 
				else if (j == BOARD_SIZE - 1)
				{
					// Right  Weight Value
					_iComJudgeWeightArr[iLeftIndex] += _iExist_Star_Around;
					// Is Not Up Right 
					if (i != 0)
						_iComJudgeWeightArr[iUpIndex] += _iExist_Star_Around;
					// Is Not Down Right
					if (i != BOARD_SIZE - 1)
						_iComJudgeWeightArr[iDownIndex] += _iExist_Star_Around;
				}
				else
				{
					_iComJudgeWeightArr[iUpIndex] += _iExist_Star_Around;
					_iComJudgeWeightArr[iDownIndex] += _iExist_Star_Around;
					_iComJudgeWeightArr[iLeftIndex] += _iExist_Star_Around;
					_iComJudgeWeightArr[iRightIndex] += _iExist_Star_Around;
				}
				_iComJudgeWeightArr[iIndex] += _iExist_Star;
			}
		}
	}
}
// Update Comp Board Exist Star Near Bingo
// ComBingoBoard Arr, Com JudgeWeight Arr
void Update_Board_Exist_Star_Near_Bingo(int* const _iComBingoBoardArr, int* _iComJudgeWeightArr)
{
	// define Variable Need to Check Empty Position
	int			iCheckConsecutiveStarsCount = 0;
	int			iIndex = 0;
	int			i = 0;
	int			j = 0;
	// Check Left Cross
	for (i = 0; i < BOARD_SIZE; ++i)
	{
		iIndex = BOARD_SIZE * i + j;
		if (_iComBingoBoardArr[iIndex] == BOARD_STAR)
		{
			++iCheckConsecutiveStarsCount;
		}
		++j;
	}
	// Number of Consecutive Stars is more than two  (Left Cross)
	if (NONE_VALUE != Judge_Consecutive_Stars_Count_Get_Plus_Num(iCheckConsecutiveStarsCount))
	{
		// Find Not Star Position
		for (i = 0, j = 0; i < BOARD_SIZE; ++i)
		{
			iIndex = BOARD_SIZE * i + j;
			if (_iComBingoBoardArr[iIndex] != BOARD_STAR)
			{
				_iComJudgeWeightArr[iIndex] += Judge_Consecutive_Stars_Count_Get_Plus_Num(iCheckConsecutiveStarsCount);
			}
			++j;
		}
	}
	// Reset Check Bingo Count
	iCheckConsecutiveStarsCount = 0;
	// Check Right Cross
	for (i = 0, j = BOARD_SIZE - 1; i < BOARD_SIZE; ++i, --j)
	{
		iIndex = BOARD_SIZE * i + j;
		if (_iComBingoBoardArr[iIndex] == BOARD_STAR)
		{
			++iCheckConsecutiveStarsCount;
		}
	}
	// Number of Consecutive Stars is more than Two  (Right Cross)
	if (NONE_VALUE != Judge_Consecutive_Stars_Count_Get_Plus_Num(iCheckConsecutiveStarsCount))
	{
		for (i = 0, j = BOARD_SIZE - 1; i < BOARD_SIZE; ++i, --j)
		{
			iIndex = BOARD_SIZE * i + j;
			if (_iComBingoBoardArr[iIndex] != BOARD_STAR)
			{
				_iComJudgeWeightArr[iIndex] += Judge_Consecutive_Stars_Count_Get_Plus_Num(iCheckConsecutiveStarsCount);
			}
		}
	}
	// Check Height 
	for (j = 0; j < BOARD_SIZE; ++j)
	{
		iCheckConsecutiveStarsCount = 0;
		for (i = 0; i < BOARD_SIZE; ++i)
		{
			iIndex = BOARD_SIZE * i + j;
			if (_iComBingoBoardArr[iIndex] == BOARD_STAR)
			{
				++iCheckConsecutiveStarsCount;
			}
		}
		// Number of Consecutive Stars is More Than Two (Height)
		for (i = 0; i < BOARD_SIZE; ++i)
		{
			if (NONE_VALUE != Judge_Consecutive_Stars_Count_Get_Plus_Num(iCheckConsecutiveStarsCount))
			{
				iIndex = BOARD_SIZE * i + j;
				if (_iComBingoBoardArr[iIndex] != BOARD_STAR)
				{
					_iComJudgeWeightArr[iIndex] += Judge_Consecutive_Stars_Count_Get_Plus_Num(iCheckConsecutiveStarsCount);
				}
			}
		}
	}
	// Check Width
	for (i = 0; i < BOARD_SIZE; ++i)
	{
		iCheckConsecutiveStarsCount = 0;
		for (j = 0; j < BOARD_SIZE; ++j)
		{
			iIndex = BOARD_SIZE * i + j;
			if (_iComBingoBoardArr[iIndex] == BOARD_STAR)
			{
				++iCheckConsecutiveStarsCount;
			}
		}
		// Number of Consecutive Stars is More Than Two (Width)
		for (j = 0; j < BOARD_SIZE; ++j)
		{
			iIndex = BOARD_SIZE * i + j;
			if (NONE_VALUE != Judge_Consecutive_Stars_Count_Get_Plus_Num(iCheckConsecutiveStarsCount))
			{
				if (_iComBingoBoardArr[iIndex] != BOARD_STAR)
				{
					_iComJudgeWeightArr[iIndex] += Judge_Consecutive_Stars_Count_Get_Plus_Num(iCheckConsecutiveStarsCount);
				}
			}
		}
	}
}
// Update Player Num To Weight
void Update_Player_Num_To_Weight(int* const _iPlayerBingoBoardArr, int*const _iCompBingoBoardArr,  int* _iComJudgeWeightArr)
{
	// define Repeat Variable 
	int			i = 0;
	int			j = 0;
	int			k = 0;
	int			l = 0;
	// define Index Variable
	int			iPlayerIndex = 0;
	int			iComputerIndex = 0;
	for (i = 0; i < BOARD_SIZE; ++i)
	{
		for(j = 0; j < BOARD_SIZE; ++j)
		{
			iPlayerIndex = BOARD_SIZE * i + j;
			for (k = 0; k < BOARD_SIZE; ++k)
			{
				for (l = 0; l < BOARD_SIZE; ++l)
				{
					iComputerIndex = BOARD_SIZE * k + l;
					if (_iPlayerBingoBoardArr[iPlayerIndex] == _iCompBingoBoardArr[iComputerIndex])
					{
						_iComJudgeWeightArr[iComputerIndex] += WEIGHT_HAVE_PLAYER_NOT_HAVE_COMP;
						l = BOARD_SIZE;
						k = BOARD_SIZE;
					}
				}
			}
		}
	}
}
// Draw All Bingo Board
void Draw_All_Bingo_Board(int* const _iPlayerBingoBoardArr, int* const _iCompBingoBoardArr)
{
	system("cls");
	cin.clear();
	cout << "<즐거운 빙고 게임>\n====================================" << endl;
	// Player BingoBoard
	Draw_Board(_iPlayerBingoBoardArr, "Player Board");
	// Computer BingoBoard
	Draw_Board(_iCompBingoBoardArr, "Computer Board");
}
// Sort_PickUp_Order
void Sort_PickUp_Order(int* const _iComJudgeWeightArr, int* _iNumArr)
{
	int			iTmpArr[BOARD_SIZE * BOARD_SIZE] = {};
	// Into Value
	for (int i = 0; i < BOARD_SIZE; ++i)
	{
		for (int j = 0; j < BOARD_SIZE; ++j)
		{
			int iIndex = BOARD_SIZE * i + j;
			iTmpArr[iIndex] = _iComJudgeWeightArr[iIndex];
			_iNumArr[iIndex] = iIndex;
		}
	}
	// BubbleSort
	for (int i = 0; i < BOARD_SIZE * BOARD_SIZE; ++i)
	{
		for (int k = 0; k <= i; ++k)
		{
			if (iTmpArr[i] > iTmpArr[k])
			{
				// Swap Tmp Arr Value
				Swap(&iTmpArr[i], &iTmpArr[k]);
				// Swap Num Index
				Swap(&_iNumArr[i], &_iNumArr[k]);
			}
		}
	}
}
// Check Number in Board
// BingoBoard Arr, AllSize
int Get_Index_Check_Number_InBoard(int* _iBingoBoardArr,  int _iCheckNumber)
{
	for (int i = 0; i < BOARD_SIZE; ++i)
	{
		for (int j = 0; j < BOARD_SIZE; ++j)
		{
			// Get Index Number
			int iIndex = i * BOARD_SIZE + j;
			if (_iBingoBoardArr[iIndex] == _iCheckNumber)
			{
				return iIndex;
			}
		}
	}
	return NONE_VALUE;
}
// if continue Star
// Star Count
int Judge_Consecutive_Stars_Count_Get_Plus_Num(int _iStarCount)
{
	if (2 <= _iStarCount  && 5 > _iStarCount)
	{
		if (_iStarCount == 2)
		{
			return WEIGHT_CONSECUTIVE_STARS_TWO;
		}
		else if (_iStarCount == 3)
		{
			return WEIGHT_CONSECUTIVE_STARS_THREE;
		}
		else if (_iStarCount == 4)
		{
			return WEIGHT_CONSECUTIVE_STARS_FOUR;
		}
	}
	return NONE_VALUE;
}
// Sentence
int Change_Str_To_Number(char* _sSentence)
{
	// Need To Return Value
	int iNum = 0;
	// Need to Multiple Value
	int iMutipleTenNum = 1;
	// Str Input Len
	int iLen = static_cast<int>(strlen(_sSentence));
	for (int i = iLen - 1; i >= 0; --i)
	{
		// Cast Asccicode
		int iCastNum = (int)(_sSentence[i]);
		// if judge 0 ~ 9
		if (iCastNum >= 48 && iCastNum <= 57)
		{
			// right
			// Plus Num 
			iNum += iMutipleTenNum * (iCastNum - 48);
			// Multiple ten
			iMutipleTenNum *= 10;
		}
		else
			// is not Return NONE_VALUE
			return NONE_VALUE;
	}
	return iNum;
}
// Swap Method
void Swap(int* _iNum1, int* _iNum2)
{
	int iTemp = *_iNum1;
	*_iNum1 = *_iNum2;
	*_iNum2 = iTemp;
}
